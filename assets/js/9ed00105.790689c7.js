"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[873],{2163:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var t=n(4848),o=n(8453);const r={sidebar_position:3},a="Configuration",s={id:"configuration",title:"Configuration",description:"This page describes the way by which configuration is handled within DiracX.",source:"@site/docs/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/diracx/docs/configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/configuration.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Client",permalink:"/diracx/docs/client"},next:{title:"Databases",permalink:"/diracx/docs/databases"}},c={},d=[{value:"Structure of the CS",id:"structure-of-the-cs",level:2},{value:"Client access",id:"client-access",level:2},{value:"Modifying configuration",id:"modifying-configuration",level:2}];function l(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(i.p,{children:'This page describes the way by which configuration is handled within DiracX.\nConfiguration refers to the central store of configuration data which is made available to both servers and clients.\nThis is in contrast to "Settings" which are only available on the server side.\nConfidential information (such as passwords) is only handled in Settings, see the DiracX helm chart for details.'}),"\n",(0,t.jsx)(i.p,{children:"The DiracX configuration is stored as a single YAML file.\nWe recommend that this is stored within a Git repository, and DiracX provides two git-based backends can be used by servers:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git+file"}),": Refers to a local git repository. This must be stored on a shared volume which is made available to all DiracX servers."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"git+https"}),": Refers to a remote git repository that can be stored on any standard git host."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"structure-of-the-cs",children:"Structure of the CS"}),"\n",(0,t.jsxs)(i.p,{children:["The canonical way of accessing the DiracX configuration from within code is via the corresponding pydantic model.\nThis provides strong typing of all values in the CS and enables the schema of the ",(0,t.jsx)(i.code,{children:"default.yaml"})," file to be validated.\nThe pydantic model is defined in ",(0,t.jsx)(i.code,{children:"diracx.core.config"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"client-access",children:"Client access"}),"\n",(0,t.jsxs)(i.p,{children:["The DiracX configuration is made available to clients via the ",(0,t.jsx)(i.code,{children:"/api/config/"})," route.\nTo allow for updates to be quickly and efficiently propagated to clients, DiracX respects the ",(0,t.jsx)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match",children:(0,t.jsx)(i.code,{children:"If-None-Match"})})," and ",(0,t.jsx)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since",children:(0,t.jsx)(i.code,{children:"If-Modified-Since"})})," headers.\nThese headers can be used to efficiently check for updates without needing to download the entire contents of the configuration."]}),"\n",(0,t.jsx)(i.h2,{id:"modifying-configuration",children:"Modifying configuration"}),"\n",(0,t.jsxs)(i.p,{children:["Currently the canonical source of configuration is from the legacy DIRAC Configuration Service.\nWe forsee this will continue to be the case until the migration from DIRAC -> DiracX is complete.\nDuring this time, the DiracX configuration is not intended to be edited directly.\nThe DiracX ",(0,t.jsx)(i.code,{children:"default.yaml"})," file differs in structure and contents from the legacy DIRAC Configuration Service.\nThe legacy DIRAC CFG file can be converted into the new YAML format with:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"DIRAC_COMPAT_ENABLE_CS_CONVERSION=true dirac internal legacy cs-sync dirac-cs.cfg diracx-config/default.yaml\n"})}),"\n",(0,t.jsx)(i.p,{children:"TODO: Document how we will actually do the sync for production deployments..."})]})}function h(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>s});var t=n(6540);const o={},r=t.createContext(o);function a(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);