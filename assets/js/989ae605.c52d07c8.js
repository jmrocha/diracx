"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[734],{9333:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var i=s(4848),r=s(8453);const o={sidebar_position:5},t="Architecture of Services",c={id:"services",title:"Architecture of Services",description:"DiracX services are structured as a single FastAPI application, generated by:",source:"@site/docs/services.md",sourceDirName:".",slug:"/services",permalink:"/diracx-poc/docs/services",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/services.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Databases",permalink:"/diracx-poc/docs/databases"},next:{title:"Packaging and versioning",permalink:"/diracx-poc/docs/versioning"}},a={},d=[{value:"Environment Variables",id:"environment-variables",level:2},{value:"Service Routing",id:"service-routing",level:2},{value:"Dependency Injection",id:"dependency-injection",level:2},{value:"Available Dependencies",id:"available-dependencies",level:2},{value:"Settings",id:"settings",level:3},{value:"User Info",id:"user-info",level:3},{value:"Configuration",id:"configuration",level:3},{value:"SQL Databases",id:"sql-databases",level:3},{value:"OpenSearch Databases",id:"opensearch-databases",level:3},{value:"Permission Management",id:"permission-management",level:2},{value:"Adding routes",id:"adding-routes",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",strong:"strong",sup:"sup",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"architecture-of-services",children:"Architecture of Services"}),"\n",(0,i.jsx)(n.p,{children:"DiracX services are structured as a single FastAPI application, generated by:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"diracx.routers.create_app()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This setup considers environment variables and installed packages to enable DiracX extensions and configure the desired ",(0,i.jsx)(n.code,{children:"DiracxRouter"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Environment variables can be defined directly, using dotenv files, or a combination of both."}),"\n",(0,i.jsxs)(n.li,{children:["Dotenv files are loaded in order from ",(0,i.jsx)(n.code,{children:"DIRACX_SERVICE_DOTENV"})," and ",(0,i.jsx)(n.code,{children:"DIRACX_SERVICE_DOTENV_<N>"}),", where ",(0,i.jsx)(n.code,{children:"<N>"})," can be any integer."]}),"\n",(0,i.jsx)(n.li,{children:"For managing environment variables in a production deployment, refer to the DiracX Helm chart."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"service-routing",children:"Service Routing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Services are served under ",(0,i.jsx)(n.code,{children:"/api/"}),(0,i.jsx)(n.sup,{children:(0,i.jsx)(n.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})]}),"\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.code,{children:"DiracxRouter"})," corresponds to a prefix under ",(0,i.jsx)(n.code,{children:"/api/<system-name>"}),", where ",(0,i.jsx)(n.code,{children:"<system-name>"})," is defined by the entry in the ",(0,i.jsx)(n.code,{children:"diracx.services"})," entrypoint in the ",(0,i.jsx)(n.code,{children:"pyproject.toml"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Services can be disabled by setting ",(0,i.jsx)(n.code,{children:"DIRACX_SERVICE_<system-name>_ENABLED=false"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example route definition:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@router.post("/search", responses=EXAMPLE_RESPONSES)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"dependency-injection",children:"Dependency Injection"}),"\n",(0,i.jsxs)(n.p,{children:["DiracX extensively utilizes FastAPI's dependency injection. For detailed information, see ",(0,i.jsx)(n.a,{href:"https://fastapi.tiangolo.com/tutorial/dependencies/",children:"FastAPI's documentation on dependencies"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"available-dependencies",children:"Available Dependencies"}),"\n",(0,i.jsx)(n.h3,{id:"settings",children:"Settings"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Settings classes"})," are Pydantic models that load service configuration from the environment and are wrapped with ",(0,i.jsx)(n.code,{children:"add_settings_annotation"})," for FastAPI to handle them."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@add_settings_annotation\nclass AuthSettings(ServiceSettingsBase):\n    """Settings for the authentication service."""\n    model_config = SettingsConfigDict(env_prefix="DIRACX_SERVICE_AUTH_")\n\n    token_key: TokenSigningKey\n    token_algorithm: str = "RS256"\n    access_token_expire_minutes: int = 20\n    refresh_token_expire_minutes: int = 60\n'})}),"\n",(0,i.jsx)(n.p,{children:"Available environment variables:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"DIRACX_SERVICE_AUTH_TOKEN_KEY"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"DIRACX_SERVICE_AUTH_TOKEN_ALGORITHM"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"DIRACX_SERVICE_AUTH_ACCESS_TOKEN_EXPIRE_MINUTES"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"DIRACX_SERVICE_AUTH_REFRESH_TOKEN_EXPIRE_MINUTES"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Usage example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@router.get("/openid-configuration")\nasync def openid_configuration(settings: AuthSettings):\n    ...\n'})}),"\n",(0,i.jsx)(n.h3,{id:"user-info",children:"User Info"}),"\n",(0,i.jsxs)(n.p,{children:["To retrieve information about the current user, depend on ",(0,i.jsx)(n.code,{children:"AuthorizedUserInfo"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@router.get("/userinfo")\nasync def userinfo(user_info: Annotated[AuthorizedUserInfo, Depends(verify_dirac_access_token)]):\n    ...\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TODO:"})," Consider avoiding the need to manually specify the annotation."]}),"\n",(0,i.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.p,{children:"To extract information from the central DIRAC configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@router.post("/summary")\nasync def summary(config: Annotated[Config, Depends(ConfigSource.create)]):\n    ...\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Config"})," object is cached efficiently between requests and automatically refreshed. It is strongly typed and immutable for the duration of a request."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TODO:"})," Avoid the need to manually specify the annotation."]}),"\n",(0,i.jsx)(n.h3,{id:"sql-databases",children:"SQL Databases"}),"\n",(0,i.jsxs)(n.p,{children:["To depend on a SQL-backed database, use the classes in ",(0,i.jsx)(n.code,{children:"diracx.routers.dependencies"}),". The connection is managed through a central pool, with transactions opened for the duration of a request. Successful requests commit the transaction, while requests with HTTP status code ",(0,i.jsx)(n.code,{children:">=400"})," roll back the transaction. Connections are returned to the pool for reuse."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from diracx.routers.dependencies import JobDB, JobLoggingDB\n\n@router.delete("/{job_id}")\nasync def delete_single_job(job_db: JobDB, job_logging_db: JobLoggingDB):\n    ...\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Refer to the ",(0,i.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/20/core/pooling.html",children:"SQLAlchemy documentation"})," for more details."]}),"\n",(0,i.jsx)(n.h3,{id:"opensearch-databases",children:"OpenSearch Databases"}),"\n",(0,i.jsx)(n.p,{children:"Connecting to an OpenSearch database is similar to an SQL database, with connections being pooled automatically. However, there is no automatic transaction/rollback behavior."}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from diracx.routers.dependencies import JobParametersDB\n\n@router.post("/search", responses=EXAMPLE_RESPONSES)\nasync def search(job_parameters_db: JobParametersDB):\n    ...\n'})}),"\n",(0,i.jsx)(n.h2,{id:"permission-management",children:"Permission Management"}),"\n",(0,i.jsxs)(n.p,{children:["Permission management in ",(0,i.jsx)(n.code,{children:"diracx"})," is managed by ",(0,i.jsx)(n.code,{children:"AccessPolicy"}),". The idea is that each policy can inject data upon token issuance, and every route will rely on a given policy to check permissions."]}),"\n",(0,i.jsxs)(n.p,{children:["The various policies are defined in ",(0,i.jsx)(n.code,{children:"diracx-routers/pyproject.toml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[project.entry-points."diracx.access_policies"]\nWMSAccessPolicy = "diracx.routers.job_manager.access_policies:WMSAccessPolicy"\nSandboxAccessPolicy = "diracx.routers.job_manager.access_policies:SandboxAccessPolicy"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Each route must have a policy as an argument and call it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from .access_policies import ActionType, CheckWMSPolicyCallable\n\n@router.post("/")\nasync def submit_bulk_jobs(\n    job_definitions: Annotated[list[str], Body()],\n    job_db: JobDB,\n    check_permissions: CheckWMSPolicyCallable,\n) -> list[InsertedJob]:\n    await check_permissions(action=ActionType.CREATE, job_db=job_db)\n    ...\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Failing to do so will result in a CI error ",(0,i.jsx)(n.code,{children:"test_all_routes_have_policy"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Some routes do not need access permissions, like the authorization ones, in which case they can be marked as such:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from .access_policies import open_access\n\n@open_access\n@router.get("/")\nasync def serve_config():\n    ...\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Implementing a new ",(0,i.jsx)(n.code,{children:"AccessPolicy"})," is done by:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Creating a module in ",(0,i.jsx)(n.code,{children:"diracx.routers.<service>access_policies.py"})]}),"\n",(0,i.jsxs)(n.li,{children:["Creating a new class inheriting from ",(0,i.jsx)(n.code,{children:"BaseAccessPolicy"})]}),"\n",(0,i.jsxs)(n.li,{children:["For specific instructions, see ",(0,i.jsx)(n.code,{children:"diracx-routers/src/diracx/routers/access_policies.py"})]}),"\n",(0,i.jsxs)(n.li,{children:["Adding an entry to the ",(0,i.jsx)(n.code,{children:"diracx.access_policies"})," entrypoint."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["When running tests, no permission is checked. This is to allow testing the router behavior with respect to the policy behavior. For testing a policy, see for example ",(0,i.jsx)(n.code,{children:"diracx-routers/tests/jobs/test_wms_access_policy.py"})]})}),"\n",(0,i.jsx)(n.h2,{id:"adding-routes",children:"Adding routes"}),"\n",(0,i.jsx)(n.p,{children:"When routes are defined they're automatically included in the OpenAPI specification.\nThis is then used to automatically generate client bindings and means that more of the Python code is included in the externally visible interface than is typically expected.\nTo ensure consistency, the following rules must be followed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All routers must be tagged and the first tag becomes the name of the sub-client."}),"\n",(0,i.jsx)(n.li,{children:"The name of the route becomes the name of the client method."}),"\n",(0,i.jsxs)(n.li,{children:["Uses of ",(0,i.jsx)(n.code,{children:"fastapi.Form"})," must specify a ",(0,i.jsx)(n.code,{children:"description"}),"."]}),"\n"]}),"\n","\n",(0,i.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,i.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{id:"user-content-fn-1",children:["\n",(0,i.jsxs)(n.p,{children:["The only exception is ",(0,i.jsx)(n.code,{children:"/.well-known/"}),". ",(0,i.jsx)(n.a,{href:"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var i=s(6540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);